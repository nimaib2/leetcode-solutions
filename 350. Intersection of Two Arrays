class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if(nums1==null || nums1.length==0 || nums2==null){
            return new int[] {};
        }

        int m = nums1.length;
        int n = nums2.length;
        if(m>n){
            return intersect(nums2, nums1);
        }
        List<Integer> result = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int low=0;
        for(int i=0; i<m; i++){
            int bsIndex = binarySearch(nums1[i], nums2, low, n-1);
            if(bsIndex!=-1){
                result.add(nums1[i]);
                low = bsIndex+1;
            }
        }
        int[] answer = new int[result.size()];
        for(int i=0; i<result.size(); i++){
            answer[i]=result.get(i);
        }
        return answer;
    }

    private int binarySearch(int target, int[] nums, int low, int high){
        while(low<=high){
            int mid = low+(high-low)/2; //prevents integer overflow
            if(nums[mid]==target){
                if(mid==low||nums[mid-1]!=nums[mid]){
                    return mid;
                }
                high = mid-1;
            } else if(nums[mid]>target){
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        return -1;
    }
}
